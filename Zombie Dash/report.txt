This is a long report

Part 1 - My public member funtions
The spec said "public" so I won't explain my protected or private ones unless I have time
=======================================================================================================
Actor
-------------------------------------------------------------------------------------------------------
Actor(int imageID, double startX, double startY, StudentWorld* world, Direction dir = 0, int depth = 0,
	double size = 1.0);
	- Passes almost everything to the graphObject constructor
	- Stores world as a private variable. Sets m_alive to true, sets m_penelope to nullptr
virtual void doSomething() = 0;
	- All actors need to doSomething and each does it in a different way
bool isAlive();
	- All actors do this the same way. Returns true if the actor is still alive
virtual void makeDead();
	- All actors do this the same way. Sets m_alive to false
virtual void beMurdered();
	- Similar to makeDead, but also includes the sound effects and points when appropriate
StudentWorld* getWorld();
	- Returns pointer to the world. Very useful
virtual bool checkIntersect() = 0;
	- Pure virtual. Bounded objects and Wall return true, Unbounded returns false. Tells
	  StudentWorld::doesIntersect() whether or not to check that object for bound box intersection
	- Will be overriden
virtual bool canBeInfected();
	- Default is false. Overridden by humans. Used to identify humans in StudentWorld
	- Will be overriden
virtual bool canBeDestroyed();
	- Default is false. Overridden by humans, zombies, goodies, and landmines. Used to
	  identify what (gasp) can be destroyed (by flames or something) in StudentWorld
	- Will be overriden
virtual bool blocksFlames();
	- Default is false. Overridden by walls and exits. Used to identify what can block flames in
	  StudentWorld
	- Will be overriden
virtual bool isDangerous();
	- Default is false. Overridden by zombies. Used to identify zombies in StudentWorld
	- Will be overriden
virtual void activate(Actor* o);
	- Exists to be overriden by classes that can activate. Default does nothing
	- Will be overriden
virtual void useExit();
	- Allows citizens and Penelope to use the exit. Default does nothing
	- Will be overriden

Wall
-------------------------------------------------------------------------------------------------------
Wall(double x, double y, StudentWorld* world);
	- Passes parameters to Actor along with IID_WALL
	- (Actor has the default parameters of direction = 0 (right) and depth = 0)
virtual void doSomething();

	- Defined so Wall would not be abstract. Literally does nothing.
	- Overridden virtual function
virtual bool blocksFlames();

	- True. So flames will know that this blocks them. 
	- Overridden virtual function
virtual bool checkIntersect();
	- True. Walls have a bound box
	- Overridden virtual function

Bounded
-------------------------------------------------------------------------------------------------------
Bounded(int imageID, double startX, double startY, StudentWorld* world, Direction dir = 0,
	int depth = 0, double size = 1.0);
	- Passes everything to Actor
virtual bool checkIntersect();
	- True. Humans and Zombies have bound boxes
	- Overridden virtual function

Human
-------------------------------------------------------------------------------------------------------
Human(int imageID, double startX, double startY, StudentWorld* world, Direction dir = 0, int depth = 0,
	double size = 1.0);
	- Passes everything to Bounded
	- Set m_infected to false and m_infectionCount to 0
virtual bool canBeInfected();
	- True. Special trait of humans
	- Overridden virtual function
virtual bool canBeDestroyed();
	- True. Humans are squishy.
	- Overridden virtual function
virtual void activate(Actor* o);
	- This actually works as a "becomeInfected" function. I figured I didn't have to write a
	  separate function when this one is called in the right situation. And I just think of it
	  as the infection activating so I can pretend that I believe this is completely okay
	- Play sfx, sets m_infected to true
	- Overridden virtual function
int getInfectionCount();
	- Returns the infection count. For the status line in the game.

Penelope
-------------------------------------------------------------------------------------------------------
Penelope(double x, double y, StudentWorld* world);
	- Passes everything to Human
	- Sets m_mines, m_gas, and m_vaccines to 0
virtual void doSomething();

	- Do what Penelope does. Basically her controls and also infection if that happens.
	- I mean, it's literally does "What a Penelope Object Must Do During a Tick" line by line
	  I can copy the text over or something
	- I guess it uses a switch statement and calls the appropriate function based on what key is
	  pressed?
	- Overridden virtual function
void addMine();
	- 
Adds 2 mines to her inventory
void addGas();

	- Adds 5 gas cans to her inventory
void addVacc();

	- Adds a vaccine to her inventory
virtual void useExit();

	- Play sfx, ends level
	- Overridden virtual function
virtual void beMurdered();

	- (if not already dead) Play sfx, die 
	- Overridden virtual function
int getVaccs();

	- Returns number of vaccines to display in status
int getFlames();

	- Returns number of flames to display in status
int getMines();
	- Returns number of landmines to display in status

Citizen
-------------------------------------------------------------------------------------------------------
Citizen(double x, double y, StudentWorld* world);
	- Passes stuff to Human. I'm sensing a pattern here
virtual void doSomething();

	- Does what the spec says
		- Check if paralyzed. Don't do anything if true.
		- Calculate distance from nearest zombie and distance from Penelope
		- Tries to follow Penelope if she's in range and is closer than the nearest zombie
		- Otherwise tries to run away from zombie if that's in range
		- Or sits
	- Overridden virtual function
virtual void useExit();

	- Woohoo! Escape! Get points!
	- Overridden virtual function
virtual void beMurdered();
	- Play sfx, die
	- Overridden virtual function

Zombies
-------------------------------------------------------------------------------------------------------
Zombies(double startX, double startY, StudentWorld* world, Direction dir = 0, int depth = 0,
	double size = 1.0);

	- Passes things to Bounded
virtual bool canBeDestroyed();
	- True. Zombies are also squishy
	- Overridden virtual function
virtual bool isDangerous();
	- True. They eat brains
	- Overridden virtual function
virtual void doSomething();
	- Does what the spec says
		- Check if paralyzed. Don't do anything if true.
		- Check if should vomit. If yes have 1/3 chance of vomitting. If yes, end turn.
		- Make a movePlan if there is no existing one
			- doSomethingUnique
		- Follow the movePlan
	- Overridden virtual function
virtual void beMurdered()
	- Play sfx, die
	- Overridden virtual function

DumbZombie
-------------------------------------------------------------------------------------------------------
DumbZombie(double x, double y, StudentWorld* world);

	- Passes stuff to Zombie

SmartZombie
-------------------------------------------------------------------------------------------------------
SmartZombie(double x, double y, StudentWorld* world);

	- Passes stuff to Zombie

Unbounded
-------------------------------------------------------------------------------------------------------
Unbounded(int imageID, double startX, double startY, StudentWorld* world, Direction dir = 0,
	int depth = 0, double size = 1.0);
	- Passes stuff to Actor, suprise
virtual bool checkIntersect();
	- No. We don't care about the bound box for these.
	- Overridden virtual function

Exit
-------------------------------------------------------------------------------------------------------
Exit(double x, double y, StudentWorld* world);

	- Passes everything to Unbounded
virtual void doSomething();

	- Waits for something to overlap with it
	- Overridden virtual function
virtual bool blocksFlames();

	- Yes. They do. The spec says so 
	- Overridden virtual function
virtual void activate(Actor* o);
	- If overlaps with an actor that canBeInfected (aka humans), let them use the exit 
	- Overridden virtual function

Goodies
-------------------------------------------------------------------------------------------------------
Goodies(int imageID, double startX, double startY, StudentWorld* world, Direction dir = 0,
	int depth = 0, double size = 0);

	- Guess what this does? Yup, it passes its parameters to Unbounded
virtual bool canBeDestroyed();
	- Yes. It's a fact
	- Overridden virtual function
virtual void activate(Actor* o);

	- If overlaps with Penelope, let her pick up a goodie
	- Overridden virtual function
virtual void doSomething();
	- Waits for Penelope to overlap with it
	- Overridden virtual function

Vaccine
-------------------------------------------------------------------------------------------------------
Vaccine(double x, double y, StudentWorld* world);

	- Yes yes, passes things to Goodies

GasCan
-------------------------------------------------------------------------------------------------------
GasCan(double x, double y, StudentWorld* world);
	- Also, passes things to Goodies

LandmineGoodie
-------------------------------------------------------------------------------------------------------
LandmineGoodie(double x, double y, StudentWorld* world);
	- WHOA! THIS PASSES THINGS TO GOODIES

Vomit
-------------------------------------------------------------------------------------------------------
Vomit(double x, double y, StudentWorld* world, Direction dir);

	- Passes things to Unbounded
	- Sets m_life to 2
virtual void doSomething();

	- Check if something overlaps with it
	- Decrements life or makes it dead if it has no more life
	- Overridden virtual function
virtual void activate(Actor* o);
	- If overlaps with human (canBeInfected()), infect them
	- Overridden virtual function

Flame
-------------------------------------------------------------------------------------------------------
Flame(double x, double y, StudentWorld* world, Direction dir);

	- Did you just read my mind? Because yes, this passes things to Unbounded
	- Sets m_life to 2
virtual void doSomething();

	- Check if something overlaps with it
	- Decrements life or makes it dead if it has no more life
	- Overridden virtual function
virtual void activate(Actor* o);
	- If overlaps with anything that canBeDestroyed(), murder it
	- Overridden virtual function

Pit
-------------------------------------------------------------------------------------------------------
Pit(double x, double y, StudentWorld* world);

	- Did you just read my mind? Because yes, this passes things to Unbounded
virtual void doSomething();

	- Wait for something to overlap with it
	- Overridden virtual function
virtual void activate(Actor* o);
	- Murders humans (canBeInfected()) and zombies (isDangerous()) that overlap
	- Overridden virtual function

Landmine
-------------------------------------------------------------------------------------------------------
Landmine(double x, double y, StudentWorld* world);

	- Yes, I copied and pasted. Because this passes things to Unbounded
	- Sets m_safety to 30
virtual void doSomething();
	- Decrease safety once per tick until it's 0, then do next step
	- Wait for something to overlap
	- Overridden virtual function
virtual bool canBeDestroyed();

	- Yes. It can. Fight me. 
	- Overridden virtual function
virtual void activate(Actor* o);

	- If a human (canBeInfected()) or a zombie (isDangerous()) overlaps, murder itself
	- Overridden virtual function
virtual void beMurdered();
	- (if not dead already) Make itself die, play sfx
	- Places 9 flames in NW, N, NE, W, E, SW, S, SE and (x,y) if the flames aren't blocked
		- Blocked would mean a wall or exit
	- Places a pit where it used to be
	- Overridden virtual function

StudentWorld
-------------------------------------------------------------------------------------------------------
StudentWorld(std::string assetPath);

virtual ~StudentWorld();

virtual int init();
	- Overridden virtual function
virtual int move();
	- Overridden virtual function
virtual void cleanUp();

	- Overridden virtual function
Penelope* getPenelope() const;

	- Returns m_penelope pointer. Useful for goodies to call her functions that aren't in Actor
void doOnOverlap(Actor* o);

	- Runs through list of Actors
	- If iterator if pointing a different Actor than o
		- calculate delta x and delta y using the the x and y coordinates of o and the x and y
		  coordinates of the object the iterator is currently at
		- take the sum of delta x squared and delta y squared
		- if that is <=100 (which is 10^2, I squared both sides), then activate the iterator
bool doesOverlap(Actor* o);
	- This literally exists only for the dumb zombies that drop a vaccine goodie
	- Runs through list of Actors
		- Returns true if any object is within 10 pixels
bool doesIntersect(double x, double y, Actor* o) const;

	- Runs through list of Actors
	- If iterator is pointing to a different Actor than o and checkIntersect() is true
		- Check if the bottom left corner, bottom right corner, top right corner, and top left
		  corner of o is in the range of the bound box of the iterator
bool flameBlocked(Actor* o) const;

	- Runs through the list of Actors. Does Euclidean distance for each, but
		1. first checks if the iterator blocksFlames()
		2. returns true immediately if any object is in range
bool shouldVomit(double x, double y) const;

	- Runs through the list of Actors. Does Euclidean distance for each, but
		1. first checks if the iterator canBeInfected() (is a human)
		2. returns true immediately if any human is in range
bool shouldPursue(Actor* o, Actor*& target) const;

	- Runs through the list of Actors. Does Euclidean distance for each, but
		1. first checks if the iterator canBeInfected() (is a human)
		2. records the minimum distance from a target if the minimum is < 6401 (80^2 + 1)
			- anything <6401 would be in range and cause the function to return true
			- anything >= 6401 would return false anyways
		3. sets the closest human to the target pointer reference parameter
		4. returns true if min was changed to be <= 6400, which would indicate that there
		   is a target within 80 pixels of the actor o
void followOrRun(double x, double y, double& sqdist_z, double& sqdist_p) const;

	- Does the Euclidean distance between Penelope and the passed in x and y parameters. Stores
	  that value in the sqdist_p reference parameter
	- Sets sqdist_z to -1
	- Runs through the list of Actors. Does Euclidean distance for each, but
		1. first checks if the iterator isDangerous() (is a zombie)
		2. stores the distance from the nearest zombie in the sqdist_z reference parameter
			- if there were no zombies, sqdist_z remains with the value of -1
bool noHumans() const;

	- Returns true if there are no surviving citizens
	- Runs through the list of Actors, returns false if anyCanBeInfected() and is not Penelope
	- Otherwise, return true
void removeDead();

	- Removes dead actors, excluding Penelope
	- Runs through list starting from the second item. 
		- If the current item in the list points to an object that is not alive, delete the
		  object and erase the item from the list
void addActor(Actor* a);

	- Adds an actor to the list of actors
	- Literally does that using push_back()
void levelComplete();

	- Sets m_complete to be true so move() will know when to stop
void updateStatus();
	- Updates the status string at the top of the screen
	- Sets the score to always display 6 digits/chars (so fill in the space with leading 0's)
	- Level displays 2 chars (filled in with a leading space)
	- Get other data using Penelope's public functions
	- Store all that information in order in an ostringstream, then convert that to a string and
	  use it to setGameStatText()

Part 1.5 - Non-public Functions that I thought were cool and worth explaining
Scroll past if you don't care
=======================================================================================================
More important functions
-------------------------------------------------------------------------------------------------------
void Actor::switchCoords(double& x, double&y, double dist, Direction dir);
	- Oh oh oh! what this does is you give starting coordinates (x,y), the distance you want to go
	  and the direction you want to move in
	- Then it'll do the switch statement and update coordinates (x,y) correctly so that you don't
	  have to copy and paste that giant switch thing five times or so

bool Bounded::moveMyself(double x, double y);
	- Checks if moving to that spot is valid, then move. Returns true if movement was made
	  or false if could not be made (so that the actor would know when it has to do other stuff)
bool Bounded::setSmartDir(Actor* o, Actor* t);
	- I love this one!!!! Used by smart zombies and citizens with beSmarter()
		- smart zombies aren't as smart as citizens so their beSmarter() just returns true
	- Long long long function that I didn't want to rewrite. If beSmarter() is true, sets the
	  direction to point towards the target if they are in the same column/row or one of the two
	  directions that would get the actor closer to the target
		- For citizens, if one of the directions is not available, they will choose the other
	- Returns true if the direction was set and false if it wasn't
		- For citizens, this function will also move them if it returns true
bool Citizen::beSmarter(Actor* o, Direction d);

	- Private overridden virtual function
	- If two directions are possible, Citizens will also check if moving in this direction is
	  possible. If it is, the citizen will move and this returns true. If not, this will return 
	  false.
	- If this returns false, setSmartDir will check the other direction or return false. 
bool Citizen::calcRunWhere(double x, double y, double osqd_z);

	- This would be when a citizen is trying to run away from a zombie.
	- It will calculate the direction a citizen should move in that would make it have the greatest
	  distance from the nearest zombie. 
		- I called followOrRun() to get the distances, though that also produces a distance
		  from Penelope which I just ignore
	- The citizen then moves in that direction if that would increase the distance as compared to
	  its current distance, and returns true.
	- If the citizen doesn't move, this returns false.
virtual void doSomethingUnique() = 0;
	- Private overridden pure virtual function
	- Dumbzombies just getRandDir() and set their direction to that
	- Smartzombies call setSmartDir()

Minor functions
-------------------------------------------------------------------------------------------------------
bool Bounded::isParalyzed();
	- Used by zombies and citizens
	- Just returns the value of m_paralyzed and changes it to the opposite value for the next tick
bool Human::doInfectionStuff();
	- Just increases infection count and turns the human when the count >=500
virtual void turn() = 0;
	- Private overridden pure virtual function
	- Humans lose points, new zombie is created (70% chance dumb, 30% smart), play sfx
	- Penelope just dies, play different sfx
void Penelope::useFlame();
	- Just creates three flame objects in front of Penelope if they aren't blocked
void Goodies::getPickedUp(Penelope* p);
	- Increases the score, makes the goodie dead, plays the sound, and givesSpecificGoodie()
void Goodies::giveSpecificGoodie(Penelope* p) = 0;
	- Private overridden virtual function
	- Meant to be overridden by each specific goodie so that they would call the corresponding 
	  add____() functions

Part 2 - What I didn't finish
=======================================================================================================
I think I finished.

Part 3 - Design Assumptions
=======================================================================================================
- "Choose randomly"
	- I made the computer choose with a random int, which I think is the safer interpretation. I 
	  wish I had the courage to interpret this as "I choose randomly"
- "If a flame at posi would overlap with a wall or exit object, then immediately stop the loop."
	- So I used the Euclidean when trying to figure out if a flame can exist. This lets the flames
	  shoot through the cracks in the wall at the right spot, but that's what the spec said.
	- https://i.imgur.com/pJhkKUL.png
- "Introduce flame objects in the eight adjacent slots around the landmine (north, northeast, east,
southeast, south, southwest, west, northwest). Each such adjacent spot must exactly SPRITE_WIDTH pixels
away horizontally and/or SPRITE_HEIGHT pixels away vertically."
	- I assumed that these flames would also be blocked by exits and walls
- "An exit do not block other objects from moving nearby/onto them."
	- I assumed that this includes zombies, which I think is dumb because why can zombies walk
	  onto the exit? I can't kill them either because flames are blocked. But that's what the spec
	  says, so that's what I did. And it does require less coding. 
- I assume that a citizen who is infected can still use the exit, though why that is okay I have no
clue. Maybe they have vaccines there. 
- "After exactly __ ticks"
	- I assumed that if I just set a countdown, it would work. For example, for flames, the first
	  tick the flame is created, it does something and then it's counter decreases. On its 3rd
	  tick (after the second), the counter hits 0 and it's state is set to dead before it does
	  anything
- I assume that the Euclidean distance between the centers of two objects is the same as the Euclidean
distance between the bottom left corners if the objects are the same size, which they are. 
- Probably made a few more assumptions, can't remember them. 

Part 4 - Testing
=======================================================================================================
I only tested the behaviors of the objects in game. Of course, this might lead to me changing functions
in abstract classes, but I didn't directly test Actor, Bounded, Unbounded, Human, Zombies, and Goodies

Walls
-------------------------------------------------------------------------------------------------------
- I tried running into them. The zombies would run into them. I tried setting flames off through them
(both the flamethrower and the mines). The flamets CAN pass through the cracks at a certain distance
because flames check overlap and not bound boxes.

Penelope
-------------------------------------------------------------------------------------------------------
- Hoo boy. Our protaganist. I moved with arrow keys and things. Placed mines, shot fire, used vaccines,
picked up all sorts of goodies, ran into holes, waited on a landmine, waited next to a landmine and set
it off with my flamethrower, got followed around by citizens and smart zombies, got infected, and
successfully cleared levels. I did try to run into the flamethrower flames, but couldn't quite get that
to work. Changed her a bit so that she would start off with some mines, gas, and vaccines so I didn't
need to go around picking them up in order to use them.

Citizens
-------------------------------------------------------------------------------------------------------
- I didn't really test too much. I did observe them. They travel the same speed as in the sample game,
so paralyzing works. I also checked the paralysis with a breakpoint. They did do their best to stay
away from zombies. I remember seeing a broken half-circle of zombies with the citizen being in the
middle (three or four of them about the same distance away from the citizen), so the citizens do choose
to move to the spot where they're farthest away from all the zombies on average. In level 2, I also
tried inching towards them. About 5 walls away (or 80 px), they started following me. They don't pass
through walls, they do go through exits. They also do fall down pits and die in flames, they do get
infected and turn to zombies. All brutally murdered for testing purposes. But I hate them because they
keep blocking my from moving so it's okay.

DumbZombies
-------------------------------------------------------------------------------------------------------
- They move like they do in the sample. They infect Penelope and citizens. They die in fire and pits.
They sometimes drop vaccines. Just... dumb zombies. 

SmartZombies
-------------------------------------------------------------------------------------------------------
- They follow Penelope and citizens. They infect Penelope and citizens. Their range before they follow
Penelope is about 5 walls, so 80 px. They die in fire and pits. I had a level where a smart zombie
chases a citizen straight to an exit. They both do move in a straight line, and the citizen outruns the
zombie which makes sense because one moves 2 px per turn while one moves 1. I did breakpoints to check
that they both are paralyzed properly. 

Exits
-------------------------------------------------------------------------------------------------------
- They... work? Citizens WOOHOO! and Penelope can pass through after all the citizens do. She can't if
a citizen is still alive. They block flame from the flamethrower and the landmine. Zombies can step on
them but they don't do anything

Goodies (all three: GasCan, LandmineGoodie, and Vaccine)
-------------------------------------------------------------------------------------------------------
- Penelope picked them up, the right amount was added when she picked them up. They are decreased when
they are used. They are destroyed by flames (all three of them). 

Flame
-------------------------------------------------------------------------------------------------------
- Tested by randomly torching things with the flamethrower. No they don't overlap with walls. Yes they
can sneak through the crack. No they don't overlap with exits. Yes they can sneak through the cracks of
these too. 

Vomit
-------------------------------------------------------------------------------------------------------
- It looks and acts like it does in the sample. It infects people. 

Pit
-------------------------------------------------------------------------------------------------------
- It looks and acts like it does in the sample. It is made after landmines explode. Penelope, citizens,
and zombies can fall and die. 

Landmine
-------------------------------------------------------------------------------------------------------
- It looks and acts like it does in the sample. It is triggered by zombies, citizens, Penelope, and
flames.

Other Miscellaneous Tests
-------------------------------------------------------------------------------------------------------
- Negative scores work. 
- Set breakpoints to make sure a lot of functions work correctly. Can't remember most of them though. 
	- One recent example was why pits didn't cause Penelope to die. Turns out I did checkOverlap()
	  instead of o->checkOverlap(). 
	- Also set breakpoints to check paralyze and things like that. 
- Check that all the sounds are played. 
- Check that every time something is created, it is either added to the list or deleted. 
- Reread the spec and compared everything to the code I wrote. 